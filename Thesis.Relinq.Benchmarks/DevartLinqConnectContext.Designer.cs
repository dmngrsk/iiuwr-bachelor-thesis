//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 09.06.2017 18:11:54
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace NorthwindContext
{

    [DatabaseAttribute(Name = "northwind")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class NorthwindDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(NorthwindDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertCustomercustomerdemo(Customercustomerdemo instance);
        partial void UpdateCustomercustomerdemo(Customercustomerdemo instance);
        partial void DeleteCustomercustomerdemo(Customercustomerdemo instance);
        partial void InsertCustomerdemographic(Customerdemographic instance);
        partial void UpdateCustomerdemographic(Customerdemographic instance);
        partial void DeleteCustomerdemographic(Customerdemographic instance);
        partial void InsertCustomer(Customer instance);
        partial void UpdateCustomer(Customer instance);
        partial void DeleteCustomer(Customer instance);
        partial void InsertEmployee(Employee instance);
        partial void UpdateEmployee(Employee instance);
        partial void DeleteEmployee(Employee instance);
        partial void InsertEmployeeterritory(Employeeterritory instance);
        partial void UpdateEmployeeterritory(Employeeterritory instance);
        partial void DeleteEmployeeterritory(Employeeterritory instance);
        partial void InsertOrderDetail(OrderDetail instance);
        partial void UpdateOrderDetail(OrderDetail instance);
        partial void DeleteOrderDetail(OrderDetail instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertRegion(Region instance);
        partial void UpdateRegion(Region instance);
        partial void DeleteRegion(Region instance);
        partial void InsertShipper(Shipper instance);
        partial void UpdateShipper(Shipper instance);
        partial void DeleteShipper(Shipper instance);
        partial void InsertShippersTmp(ShippersTmp instance);
        partial void UpdateShippersTmp(ShippersTmp instance);
        partial void DeleteShippersTmp(ShippersTmp instance);
        partial void InsertSupplier(Supplier instance);
        partial void UpdateSupplier(Supplier instance);
        partial void DeleteSupplier(Supplier instance);
        partial void InsertTerritory(Territory instance);
        partial void UpdateTerritory(Territory instance);
        partial void DeleteTerritory(Territory instance);

        #endregion

        public NorthwindDataContext() :
        base(GetConnectionString("NorthwindDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public NorthwindDataContext(MappingSource mappingSource) :
        base(GetConnectionString("NorthwindDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public NorthwindDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public NorthwindDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public NorthwindDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public NorthwindDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<Customercustomerdemo> Customercustomerdemos
        {
            get
            {
                return this.GetTable<Customercustomerdemo>();
            }
        }

        public Devart.Data.Linq.Table<Customerdemographic> Customerdemographics
        {
            get
            {
                return this.GetTable<Customerdemographic>();
            }
        }

        public Devart.Data.Linq.Table<Customer> Customers
        {
            get
            {
                return this.GetTable<Customer>();
            }
        }

        public Devart.Data.Linq.Table<Employee> Employees
        {
            get
            {
                return this.GetTable<Employee>();
            }
        }

        public Devart.Data.Linq.Table<Employeeterritory> Employeeterritories
        {
            get
            {
                return this.GetTable<Employeeterritory>();
            }
        }

        public Devart.Data.Linq.Table<OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<Region> Regions
        {
            get
            {
                return this.GetTable<Region>();
            }
        }

        public Devart.Data.Linq.Table<Shipper> Shippers
        {
            get
            {
                return this.GetTable<Shipper>();
            }
        }

        public Devart.Data.Linq.Table<ShippersTmp> ShippersTmps
        {
            get
            {
                return this.GetTable<ShippersTmp>();
            }
        }

        public Devart.Data.Linq.Table<Supplier> Suppliers
        {
            get
            {
                return this.GetTable<Supplier>();
            }
        }

        public Devart.Data.Linq.Table<Territory> Territories
        {
            get
            {
                return this.GetTable<Territory>();
            }
        }

        public Devart.Data.Linq.Table<Usstate> Usstates
        {
            get
            {
                return this.GetTable<Usstate>();
            }
        }
    }
}

namespace NorthwindContext
{

    /// <summary>
    /// There are no comments for NorthwindContext.Category in the schema.
    /// </summary>
    [Table(Name = @"public.categories")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _CategoryID;

        private string _CategoryName;

        private string _Description;

        private byte[] _Picture;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(short value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();
        #endregion

        public Category()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Name = @"""CategoryID""", Storage = "_CategoryID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Name = @"""CategoryName""", Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"""Description""", Storage = "_Description", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Picture in the schema.
        /// </summary>
        [Column(Name = @"""Picture""", Storage = "_Picture", DbType = "BYTEA", UpdateCheck = UpdateCheck.Never)]
        public byte[] Picture
        {
            get
            {
                return this._Picture;
            }
            set
            {
                if (this._Picture != value)
                {
                    this.OnPictureChanging(value);
                    this.SendPropertyChanging();
                    this._Picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Customercustomerdemo in the schema.
    /// </summary>
    [Table(Name = @"public.customercustomerdemo")]
    public partial class Customercustomerdemo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerID;

        private string _CustomerTypeID;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnCustomerTypeIDChanging(string value);
        partial void OnCustomerTypeIDChanged();
        #endregion

        public Customercustomerdemo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Name = @"""CustomerID""", Storage = "_CustomerID", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerTypeID in the schema.
        /// </summary>
        [Column(Name = @"""CustomerTypeID""", Storage = "_CustomerTypeID", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string CustomerTypeID
        {
            get
            {
                return this._CustomerTypeID;
            }
            set
            {
                if (this._CustomerTypeID != value)
                {
                    this.OnCustomerTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerTypeID = value;
                    this.SendPropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Customerdemographic in the schema.
    /// </summary>
    [Table(Name = @"public.customerdemographics")]
    public partial class Customerdemographic : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerTypeID;

        private string _CustomerDesc;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerTypeIDChanging(string value);
        partial void OnCustomerTypeIDChanged();
        partial void OnCustomerDescChanging(string value);
        partial void OnCustomerDescChanged();
        #endregion

        public Customerdemographic()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerTypeID in the schema.
        /// </summary>
        [Column(Name = @"""CustomerTypeID""", Storage = "_CustomerTypeID", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string CustomerTypeID
        {
            get
            {
                return this._CustomerTypeID;
            }
            set
            {
                if (this._CustomerTypeID != value)
                {
                    this.OnCustomerTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerTypeID = value;
                    this.SendPropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerDesc in the schema.
        /// </summary>
        [Column(Name = @"""CustomerDesc""", Storage = "_CustomerDesc", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CustomerDesc
        {
            get
            {
                return this._CustomerDesc;
            }
            set
            {
                if (this._CustomerDesc != value)
                {
                    this.OnCustomerDescChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerDesc = value;
                    this.SendPropertyChanged("CustomerDesc");
                    this.OnCustomerDescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Customer in the schema.
    /// </summary>
    [Table(Name = @"public.customers")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CustomerID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Customer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Name = @"""CustomerID""", Storage = "_CustomerID", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Name = @"""CompanyName""", Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactName in the schema.
        /// </summary>
        [Column(Name = @"""ContactName""", Storage = "_ContactName", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ContactName
        {
            get
            {
                return this._ContactName;
            }
            set
            {
                if (this._ContactName != value)
                {
                    this.OnContactNameChanging(value);
                    this.SendPropertyChanging();
                    this._ContactName = value;
                    this.SendPropertyChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactTitle in the schema.
        /// </summary>
        [Column(Name = @"""ContactTitle""", Storage = "_ContactTitle", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ContactTitle
        {
            get
            {
                return this._ContactTitle;
            }
            set
            {
                if (this._ContactTitle != value)
                {
                    this.OnContactTitleChanging(value);
                    this.SendPropertyChanging();
                    this._ContactTitle = value;
                    this.SendPropertyChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"""Address""", Storage = "_Address", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"""City""", Storage = "_City", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Name = @"""Region""", Storage = "_Region", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Name = @"""PostalCode""", Storage = "_PostalCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"""Country""", Storage = "_Country", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"""Fax""", Storage = "_Fax", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Employee in the schema.
    /// </summary>
    [Table(Name = @"public.employees")]
    public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _EmployeeID;

        private string _LastName;

        private string _FirstName;

        private string _Title;

        private string _TitleOfCourtesy;

        private System.Nullable<System.DateTime> _BirthDate;

        private System.Nullable<System.DateTime> _HireDate;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _HomePhone;

        private string _Extension;

        private byte[] _Photo;

        private string _Notes;

        private System.Nullable<short> _ReportsTo;

        private string _PhotoPath;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIDChanging(short value);
        partial void OnEmployeeIDChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTitleOfCourtesyChanging(string value);
        partial void OnTitleOfCourtesyChanged();
        partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthDateChanged();
        partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
        partial void OnHireDateChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnPhotoChanging(byte[] value);
        partial void OnPhotoChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnReportsToChanging(System.Nullable<short> value);
        partial void OnReportsToChanged();
        partial void OnPhotoPathChanging(string value);
        partial void OnPhotoPathChanged();
        #endregion

        public Employee()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Name = @"""EmployeeID""", Storage = "_EmployeeID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"""LastName""", Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"""FirstName""", Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"""Title""", Storage = "_Title", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TitleOfCourtesy in the schema.
        /// </summary>
        [Column(Name = @"""TitleOfCourtesy""", Storage = "_TitleOfCourtesy", DbType = "VARCHAR(25)", UpdateCheck = UpdateCheck.Never)]
        public string TitleOfCourtesy
        {
            get
            {
                return this._TitleOfCourtesy;
            }
            set
            {
                if (this._TitleOfCourtesy != value)
                {
                    this.OnTitleOfCourtesyChanging(value);
                    this.SendPropertyChanging();
                    this._TitleOfCourtesy = value;
                    this.SendPropertyChanged("TitleOfCourtesy");
                    this.OnTitleOfCourtesyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BirthDate in the schema.
        /// </summary>
        [Column(Name = @"""BirthDate""", Storage = "_BirthDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> BirthDate
        {
            get
            {
                return this._BirthDate;
            }
            set
            {
                if (this._BirthDate != value)
                {
                    this.OnBirthDateChanging(value);
                    this.SendPropertyChanging();
                    this._BirthDate = value;
                    this.SendPropertyChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HireDate in the schema.
        /// </summary>
        [Column(Name = @"""HireDate""", Storage = "_HireDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> HireDate
        {
            get
            {
                return this._HireDate;
            }
            set
            {
                if (this._HireDate != value)
                {
                    this.OnHireDateChanging(value);
                    this.SendPropertyChanging();
                    this._HireDate = value;
                    this.SendPropertyChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"""Address""", Storage = "_Address", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"""City""", Storage = "_City", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Name = @"""Region""", Storage = "_Region", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Name = @"""PostalCode""", Storage = "_PostalCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"""Country""", Storage = "_Country", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        [Column(Name = @"""HomePhone""", Storage = "_HomePhone", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Extension in the schema.
        /// </summary>
        [Column(Name = @"""Extension""", Storage = "_Extension", DbType = "VARCHAR(4)", UpdateCheck = UpdateCheck.Never)]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Photo in the schema.
        /// </summary>
        [Column(Name = @"""Photo""", Storage = "_Photo", DbType = "BYTEA", UpdateCheck = UpdateCheck.Never)]
        public byte[] Photo
        {
            get
            {
                return this._Photo;
            }
            set
            {
                if (this._Photo != value)
                {
                    this.OnPhotoChanging(value);
                    this.SendPropertyChanging();
                    this._Photo = value;
                    this.SendPropertyChanged("Photo");
                    this.OnPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Name = @"""Notes""", Storage = "_Notes", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportsTo in the schema.
        /// </summary>
        [Column(Name = @"""ReportsTo""", Storage = "_ReportsTo", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> ReportsTo
        {
            get
            {
                return this._ReportsTo;
            }
            set
            {
                if (this._ReportsTo != value)
                {
                    this.OnReportsToChanging(value);
                    this.SendPropertyChanging();
                    this._ReportsTo = value;
                    this.SendPropertyChanged("ReportsTo");
                    this.OnReportsToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhotoPath in the schema.
        /// </summary>
        [Column(Name = @"""PhotoPath""", Storage = "_PhotoPath", DbType = "VARCHAR(255)", UpdateCheck = UpdateCheck.Never)]
        public string PhotoPath
        {
            get
            {
                return this._PhotoPath;
            }
            set
            {
                if (this._PhotoPath != value)
                {
                    this.OnPhotoPathChanging(value);
                    this.SendPropertyChanging();
                    this._PhotoPath = value;
                    this.SendPropertyChanged("PhotoPath");
                    this.OnPhotoPathChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Employeeterritory in the schema.
    /// </summary>
    [Table(Name = @"public.employeeterritories")]
    public partial class Employeeterritory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _EmployeeID;

        private string _TerritoryID;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIDChanging(short value);
        partial void OnEmployeeIDChanged();
        partial void OnTerritoryIDChanging(string value);
        partial void OnTerritoryIDChanged();
        #endregion

        public Employeeterritory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Name = @"""EmployeeID""", Storage = "_EmployeeID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryID in the schema.
        /// </summary>
        [Column(Name = @"""TerritoryID""", Storage = "_TerritoryID", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string TerritoryID
        {
            get
            {
                return this._TerritoryID;
            }
            set
            {
                if (this._TerritoryID != value)
                {
                    this.OnTerritoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._TerritoryID = value;
                    this.SendPropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.OrderDetail in the schema.
    /// </summary>
    [Table(Name = @"public.order_details")]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _OrderID;

        private short _ProductID;

        private float _UnitPrice;

        private short _Quantity;

        private float _Discount;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(short value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(short value);
        partial void OnProductIDChanged();
        partial void OnUnitPriceChanging(float value);
        partial void OnUnitPriceChanged();
        partial void OnQuantityChanging(short value);
        partial void OnQuantityChanged();
        partial void OnDiscountChanging(float value);
        partial void OnDiscountChanged();
        #endregion

        public OrderDetail()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Name = @"""OrderID""", Storage = "_OrderID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Name = @"""ProductID""", Storage = "_ProductID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitPrice in the schema.
        /// </summary>
        [Column(Name = @"""UnitPrice""", Storage = "_UnitPrice", CanBeNull = false, DbType = "FLOAT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public float UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"""Quantity""", Storage = "_Quantity", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discount in the schema.
        /// </summary>
        [Column(Name = @"""Discount""", Storage = "_Discount", CanBeNull = false, DbType = "FLOAT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public float Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Order in the schema.
    /// </summary>
    [Table(Name = @"public.orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _OrderID;

        private string _CustomerID;

        private System.Nullable<short> _EmployeeID;

        private System.Nullable<System.DateTime> _OrderDate;

        private System.Nullable<System.DateTime> _RequiredDate;

        private System.Nullable<System.DateTime> _ShippedDate;

        private System.Nullable<short> _ShipVia;

        private System.Nullable<float> _Freight;

        private string _ShipName;

        private string _ShipAddress;

        private string _ShipCity;

        private string _ShipRegion;

        private string _ShipPostalCode;

        private string _ShipCountry;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(short value);
        partial void OnOrderIDChanged();
        partial void OnCustomerIDChanging(string value);
        partial void OnCustomerIDChanged();
        partial void OnEmployeeIDChanging(System.Nullable<short> value);
        partial void OnEmployeeIDChanged();
        partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnRequiredDateChanging(System.Nullable<System.DateTime> value);
        partial void OnRequiredDateChanged();
        partial void OnShippedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippedDateChanged();
        partial void OnShipViaChanging(System.Nullable<short> value);
        partial void OnShipViaChanged();
        partial void OnFreightChanging(System.Nullable<float> value);
        partial void OnFreightChanged();
        partial void OnShipNameChanging(string value);
        partial void OnShipNameChanged();
        partial void OnShipAddressChanging(string value);
        partial void OnShipAddressChanged();
        partial void OnShipCityChanging(string value);
        partial void OnShipCityChanged();
        partial void OnShipRegionChanging(string value);
        partial void OnShipRegionChanged();
        partial void OnShipPostalCodeChanging(string value);
        partial void OnShipPostalCodeChanged();
        partial void OnShipCountryChanging(string value);
        partial void OnShipCountryChanged();
        #endregion

        public Order()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Name = @"""OrderID""", Storage = "_OrderID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerID in the schema.
        /// </summary>
        [Column(Name = @"""CustomerID""", Storage = "_CustomerID", DbType = "CHAR", UpdateCheck = UpdateCheck.Never)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if (this._CustomerID != value)
                {
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Name = @"""EmployeeID""", Storage = "_EmployeeID", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDate in the schema.
        /// </summary>
        [Column(Name = @"""OrderDate""", Storage = "_OrderDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequiredDate in the schema.
        /// </summary>
        [Column(Name = @"""RequiredDate""", Storage = "_RequiredDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> RequiredDate
        {
            get
            {
                return this._RequiredDate;
            }
            set
            {
                if (this._RequiredDate != value)
                {
                    this.OnRequiredDateChanging(value);
                    this.SendPropertyChanging();
                    this._RequiredDate = value;
                    this.SendPropertyChanged("RequiredDate");
                    this.OnRequiredDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShippedDate in the schema.
        /// </summary>
        [Column(Name = @"""ShippedDate""", Storage = "_ShippedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ShippedDate
        {
            get
            {
                return this._ShippedDate;
            }
            set
            {
                if (this._ShippedDate != value)
                {
                    this.OnShippedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippedDate = value;
                    this.SendPropertyChanged("ShippedDate");
                    this.OnShippedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipVia in the schema.
        /// </summary>
        [Column(Name = @"""ShipVia""", Storage = "_ShipVia", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> ShipVia
        {
            get
            {
                return this._ShipVia;
            }
            set
            {
                if (this._ShipVia != value)
                {
                    this.OnShipViaChanging(value);
                    this.SendPropertyChanging();
                    this._ShipVia = value;
                    this.SendPropertyChanged("ShipVia");
                    this.OnShipViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Freight in the schema.
        /// </summary>
        [Column(Name = @"""Freight""", Storage = "_Freight", DbType = "FLOAT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipName in the schema.
        /// </summary>
        [Column(Name = @"""ShipName""", Storage = "_ShipName", DbType = "VARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string ShipName
        {
            get
            {
                return this._ShipName;
            }
            set
            {
                if (this._ShipName != value)
                {
                    this.OnShipNameChanging(value);
                    this.SendPropertyChanging();
                    this._ShipName = value;
                    this.SendPropertyChanged("ShipName");
                    this.OnShipNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipAddress in the schema.
        /// </summary>
        [Column(Name = @"""ShipAddress""", Storage = "_ShipAddress", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string ShipAddress
        {
            get
            {
                return this._ShipAddress;
            }
            set
            {
                if (this._ShipAddress != value)
                {
                    this.OnShipAddressChanging(value);
                    this.SendPropertyChanging();
                    this._ShipAddress = value;
                    this.SendPropertyChanged("ShipAddress");
                    this.OnShipAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCity in the schema.
        /// </summary>
        [Column(Name = @"""ShipCity""", Storage = "_ShipCity", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string ShipCity
        {
            get
            {
                return this._ShipCity;
            }
            set
            {
                if (this._ShipCity != value)
                {
                    this.OnShipCityChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCity = value;
                    this.SendPropertyChanged("ShipCity");
                    this.OnShipCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipRegion in the schema.
        /// </summary>
        [Column(Name = @"""ShipRegion""", Storage = "_ShipRegion", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string ShipRegion
        {
            get
            {
                return this._ShipRegion;
            }
            set
            {
                if (this._ShipRegion != value)
                {
                    this.OnShipRegionChanging(value);
                    this.SendPropertyChanging();
                    this._ShipRegion = value;
                    this.SendPropertyChanged("ShipRegion");
                    this.OnShipRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipPostalCode in the schema.
        /// </summary>
        [Column(Name = @"""ShipPostalCode""", Storage = "_ShipPostalCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string ShipPostalCode
        {
            get
            {
                return this._ShipPostalCode;
            }
            set
            {
                if (this._ShipPostalCode != value)
                {
                    this.OnShipPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ShipPostalCode = value;
                    this.SendPropertyChanged("ShipPostalCode");
                    this.OnShipPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCountry in the schema.
        /// </summary>
        [Column(Name = @"""ShipCountry""", Storage = "_ShipCountry", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string ShipCountry
        {
            get
            {
                return this._ShipCountry;
            }
            set
            {
                if (this._ShipCountry != value)
                {
                    this.OnShipCountryChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCountry = value;
                    this.SendPropertyChanged("ShipCountry");
                    this.OnShipCountryChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Product in the schema.
    /// </summary>
    [Table(Name = @"public.products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _ProductID;

        private string _ProductName;

        private System.Nullable<short> _SupplierID;

        private System.Nullable<short> _CategoryID;

        private string _QuantityPerUnit;

        private System.Nullable<float> _UnitPrice;

        private System.Nullable<short> _UnitsInStock;

        private System.Nullable<short> _UnitsOnOrder;

        private System.Nullable<short> _ReorderLevel;

        private int _Discontinued;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(short value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnSupplierIDChanging(System.Nullable<short> value);
        partial void OnSupplierIDChanged();
        partial void OnCategoryIDChanging(System.Nullable<short> value);
        partial void OnCategoryIDChanged();
        partial void OnQuantityPerUnitChanging(string value);
        partial void OnQuantityPerUnitChanged();
        partial void OnUnitPriceChanging(System.Nullable<float> value);
        partial void OnUnitPriceChanged();
        partial void OnUnitsInStockChanging(System.Nullable<short> value);
        partial void OnUnitsInStockChanged();
        partial void OnUnitsOnOrderChanging(System.Nullable<short> value);
        partial void OnUnitsOnOrderChanged();
        partial void OnReorderLevelChanging(System.Nullable<short> value);
        partial void OnReorderLevelChanged();
        partial void OnDiscontinuedChanging(int value);
        partial void OnDiscontinuedChanged();
        #endregion

        public Product()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Name = @"""ProductID""", Storage = "_ProductID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"""ProductName""", Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierID in the schema.
        /// </summary>
        [Column(Name = @"""SupplierID""", Storage = "_SupplierID", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> SupplierID
        {
            get
            {
                return this._SupplierID;
            }
            set
            {
                if (this._SupplierID != value)
                {
                    this.OnSupplierIDChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierID = value;
                    this.SendPropertyChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Name = @"""CategoryID""", Storage = "_CategoryID", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityPerUnit in the schema.
        /// </summary>
        [Column(Name = @"""QuantityPerUnit""", Storage = "_QuantityPerUnit", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string QuantityPerUnit
        {
            get
            {
                return this._QuantityPerUnit;
            }
            set
            {
                if (this._QuantityPerUnit != value)
                {
                    this.OnQuantityPerUnitChanging(value);
                    this.SendPropertyChanging();
                    this._QuantityPerUnit = value;
                    this.SendPropertyChanged("QuantityPerUnit");
                    this.OnQuantityPerUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitPrice in the schema.
        /// </summary>
        [Column(Name = @"""UnitPrice""", Storage = "_UnitPrice", DbType = "FLOAT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsInStock in the schema.
        /// </summary>
        [Column(Name = @"""UnitsInStock""", Storage = "_UnitsInStock", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> UnitsInStock
        {
            get
            {
                return this._UnitsInStock;
            }
            set
            {
                if (this._UnitsInStock != value)
                {
                    this.OnUnitsInStockChanging(value);
                    this.SendPropertyChanging();
                    this._UnitsInStock = value;
                    this.SendPropertyChanged("UnitsInStock");
                    this.OnUnitsInStockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsOnOrder in the schema.
        /// </summary>
        [Column(Name = @"""UnitsOnOrder""", Storage = "_UnitsOnOrder", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> UnitsOnOrder
        {
            get
            {
                return this._UnitsOnOrder;
            }
            set
            {
                if (this._UnitsOnOrder != value)
                {
                    this.OnUnitsOnOrderChanging(value);
                    this.SendPropertyChanging();
                    this._UnitsOnOrder = value;
                    this.SendPropertyChanged("UnitsOnOrder");
                    this.OnUnitsOnOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReorderLevel in the schema.
        /// </summary>
        [Column(Name = @"""ReorderLevel""", Storage = "_ReorderLevel", DbType = "INT2", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<short> ReorderLevel
        {
            get
            {
                return this._ReorderLevel;
            }
            set
            {
                if (this._ReorderLevel != value)
                {
                    this.OnReorderLevelChanging(value);
                    this.SendPropertyChanging();
                    this._ReorderLevel = value;
                    this.SendPropertyChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discontinued in the schema.
        /// </summary>
        [Column(Name = @"""Discontinued""", Storage = "_Discontinued", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Discontinued
        {
            get
            {
                return this._Discontinued;
            }
            set
            {
                if (this._Discontinued != value)
                {
                    this.OnDiscontinuedChanging(value);
                    this.SendPropertyChanging();
                    this._Discontinued = value;
                    this.SendPropertyChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Region in the schema.
    /// </summary>
    [Table(Name = @"public.region")]
    public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _RegionID;

        private string _RegionDescription;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRegionIDChanging(short value);
        partial void OnRegionIDChanged();
        partial void OnRegionDescriptionChanging(string value);
        partial void OnRegionDescriptionChanged();
        #endregion

        public Region()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RegionID in the schema.
        /// </summary>
        [Column(Name = @"""RegionID""", Storage = "_RegionID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short RegionID
        {
            get
            {
                return this._RegionID;
            }
            set
            {
                if (this._RegionID != value)
                {
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RegionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegionDescription in the schema.
        /// </summary>
        [Column(Name = @"""RegionDescription""", Storage = "_RegionDescription", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RegionDescription
        {
            get
            {
                return this._RegionDescription;
            }
            set
            {
                if (this._RegionDescription != value)
                {
                    this.OnRegionDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._RegionDescription = value;
                    this.SendPropertyChanged("RegionDescription");
                    this.OnRegionDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Shipper in the schema.
    /// </summary>
    [Table(Name = @"public.shippers")]
    public partial class Shipper : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _ShipperID;

        private string _CompanyName;

        private string _Phone;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShipperIDChanging(short value);
        partial void OnShipperIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        #endregion

        public Shipper()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShipperID in the schema.
        /// </summary>
        [Column(Name = @"""ShipperID""", Storage = "_ShipperID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short ShipperID
        {
            get
            {
                return this._ShipperID;
            }
            set
            {
                if (this._ShipperID != value)
                {
                    this.OnShipperIDChanging(value);
                    this.SendPropertyChanging();
                    this._ShipperID = value;
                    this.SendPropertyChanged("ShipperID");
                    this.OnShipperIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Name = @"""CompanyName""", Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.ShippersTmp in the schema.
    /// </summary>
    [Table(Name = @"public.shippers_tmp")]
    public partial class ShippersTmp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _ShipperID;

        private string _CompanyName;

        private string _Phone;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShipperIDChanging(short value);
        partial void OnShipperIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        #endregion

        public ShippersTmp()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShipperID in the schema.
        /// </summary>
        [Column(Name = @"""ShipperID""", Storage = "_ShipperID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short ShipperID
        {
            get
            {
                return this._ShipperID;
            }
            set
            {
                if (this._ShipperID != value)
                {
                    this.OnShipperIDChanging(value);
                    this.SendPropertyChanging();
                    this._ShipperID = value;
                    this.SendPropertyChanged("ShipperID");
                    this.OnShipperIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Name = @"""CompanyName""", Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Supplier in the schema.
    /// </summary>
    [Table(Name = @"public.suppliers")]
    public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _SupplierID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private string _HomePage;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSupplierIDChanging(short value);
        partial void OnSupplierIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnContactTitleChanging(string value);
        partial void OnContactTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnHomePageChanging(string value);
        partial void OnHomePageChanged();
        #endregion

        public Supplier()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SupplierID in the schema.
        /// </summary>
        [Column(Name = @"""SupplierID""", Storage = "_SupplierID", CanBeNull = false, DbType = "INT2 NOT NULL", IsPrimaryKey = true)]
        public short SupplierID
        {
            get
            {
                return this._SupplierID;
            }
            set
            {
                if (this._SupplierID != value)
                {
                    this.OnSupplierIDChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierID = value;
                    this.SendPropertyChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Name = @"""CompanyName""", Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactName in the schema.
        /// </summary>
        [Column(Name = @"""ContactName""", Storage = "_ContactName", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ContactName
        {
            get
            {
                return this._ContactName;
            }
            set
            {
                if (this._ContactName != value)
                {
                    this.OnContactNameChanging(value);
                    this.SendPropertyChanging();
                    this._ContactName = value;
                    this.SendPropertyChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactTitle in the schema.
        /// </summary>
        [Column(Name = @"""ContactTitle""", Storage = "_ContactTitle", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string ContactTitle
        {
            get
            {
                return this._ContactTitle;
            }
            set
            {
                if (this._ContactTitle != value)
                {
                    this.OnContactTitleChanging(value);
                    this.SendPropertyChanging();
                    this._ContactTitle = value;
                    this.SendPropertyChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"""Address""", Storage = "_Address", DbType = "VARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"""City""", Storage = "_City", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Name = @"""Region""", Storage = "_Region", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostalCode in the schema.
        /// </summary>
        [Column(Name = @"""PostalCode""", Storage = "_PostalCode", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"""Country""", Storage = "_Country", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"""Fax""", Storage = "_Fax", DbType = "VARCHAR(24)", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePage in the schema.
        /// </summary>
        [Column(Name = @"""HomePage""", Storage = "_HomePage", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string HomePage
        {
            get
            {
                return this._HomePage;
            }
            set
            {
                if (this._HomePage != value)
                {
                    this.OnHomePageChanging(value);
                    this.SendPropertyChanging();
                    this._HomePage = value;
                    this.SendPropertyChanged("HomePage");
                    this.OnHomePageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Territory in the schema.
    /// </summary>
    [Table(Name = @"public.territories")]
    public partial class Territory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _TerritoryID;

        private string _TerritoryDescription;

        private short _RegionID;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTerritoryIDChanging(string value);
        partial void OnTerritoryIDChanged();
        partial void OnTerritoryDescriptionChanging(string value);
        partial void OnTerritoryDescriptionChanged();
        partial void OnRegionIDChanging(short value);
        partial void OnRegionIDChanged();
        #endregion

        public Territory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TerritoryID in the schema.
        /// </summary>
        [Column(Name = @"""TerritoryID""", Storage = "_TerritoryID", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string TerritoryID
        {
            get
            {
                return this._TerritoryID;
            }
            set
            {
                if (this._TerritoryID != value)
                {
                    this.OnTerritoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._TerritoryID = value;
                    this.SendPropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TerritoryDescription in the schema.
        /// </summary>
        [Column(Name = @"""TerritoryDescription""", Storage = "_TerritoryDescription", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TerritoryDescription
        {
            get
            {
                return this._TerritoryDescription;
            }
            set
            {
                if (this._TerritoryDescription != value)
                {
                    this.OnTerritoryDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._TerritoryDescription = value;
                    this.SendPropertyChanged("TerritoryDescription");
                    this.OnTerritoryDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegionID in the schema.
        /// </summary>
        [Column(Name = @"""RegionID""", Storage = "_RegionID", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short RegionID
        {
            get
            {
                return this._RegionID;
            }
            set
            {
                if (this._RegionID != value)
                {
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RegionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for NorthwindContext.Usstate in the schema.
    /// </summary>
    [Table(Name = @"public.usstates")]
    public partial class Usstate
    {
        #pragma warning disable 0649

        private short _StateID;

        private string _StateName;

        private string _StateAbbr;

        private string _StateRegion;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStateIDChanging(short value);
        partial void OnStateIDChanged();
        partial void OnStateNameChanging(string value);
        partial void OnStateNameChanged();
        partial void OnStateAbbrChanging(string value);
        partial void OnStateAbbrChanged();
        partial void OnStateRegionChanging(string value);
        partial void OnStateRegionChanged();
        #endregion

        public Usstate()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StateID in the schema.
        /// </summary>
        [Column(Name = @"""StateID""", Storage = "_StateID", CanBeNull = false, DbType = "INT2 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if (this._StateID != value)
                {
                    this._StateID = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StateName in the schema.
        /// </summary>
        [Column(Name = @"""StateName""", Storage = "_StateName", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string StateName
        {
            get
            {
                return this._StateName;
            }
            set
            {
                if (this._StateName != value)
                {
                    this._StateName = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StateAbbr in the schema.
        /// </summary>
        [Column(Name = @"""StateAbbr""", Storage = "_StateAbbr", DbType = "VARCHAR(2)", UpdateCheck = UpdateCheck.Never)]
        public string StateAbbr
        {
            get
            {
                return this._StateAbbr;
            }
            set
            {
                if (this._StateAbbr != value)
                {
                    this._StateAbbr = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StateRegion in the schema.
        /// </summary>
        [Column(Name = @"""StateRegion""", Storage = "_StateRegion", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string StateRegion
        {
            get
            {
                return this._StateRegion;
            }
            set
            {
                if (this._StateRegion != value)
                {
                    this._StateRegion = value;
                }
            }
        }
    }

}
